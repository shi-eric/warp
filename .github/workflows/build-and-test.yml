name: Build and Test Warp

on:
  workflow_call:

jobs:
  build-warp-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy build
          tools/packman/packman install -l _build/target-deps/cuda cuda 11.8.0_522.06-abe3d9d7-windows-x86_64
          tools/packman/packman install -l _build/host-deps/msvc msvc 2019-16.11.24
          tools/packman/packman install -l _build/host-deps/winsdk winsdk 10.17763
      - name: Build
        run: |
          python build_lib.py --cuda_path=_build/target-deps/cuda --msvc_path=_build/host-deps/msvc/VC/Tools/MSVC/14.29.30133 --sdk_path=_build/host-deps/winsdk
      - name: Build Wheel
        run: |
          mkdir -p warp/bin/windows-x86_64
          mv warp/bin/warp.dll warp/bin/windows-x86_64/
          mv warp/bin/warp-clang.dll warp/bin/windows-x86_64/
          python -m build --wheel -C--build-option=-Pwindows-x86_64
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-windows
          path: ./dist/*.whl

  build-warp-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy build
      - name: Build Warp
        run: |
          tools/packman/packman install -l _build/target-deps/cuda cuda 11.8.0_520.61-d8963068-linux-x86_64
          python build_lib.py --cuda_path=_build/target-deps/cuda
      - name: Build Wheel
        run: |
          mkdir -p warp/bin/linux-x86_64
          mv warp/bin/warp.so warp/bin/linux-x86_64
          mv warp/bin/warp-clang.so warp/bin/linux-x86_64
          python -m build --wheel -C--build-option=-Plinux-x86_64
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-ubuntu
          path: ./dist/*.whl

  build-warp-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy build
      - name: Build
        run: |
          python build_lib.py
      - name: Build Wheel
        run: |
          mkdir -p warp/bin/macos-universal
          mv warp/bin/libwarp.dylib warp/bin/macos-universal/
          mv warp/bin/libwarp-clang.dylib warp/bin/macos-universal/
          python -m build --wheel -C--build-option=-Pmacos-universal
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-macos
          path: ./dist/*.whl

  test-warp-windows:
    runs-on: windows-latest
    needs: build-warp-windows
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Download Warp build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-windows
          path: ./dist/
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy coverage[toml] usd-core
          $wheel = Get-ChildItem -Path ./dist -Filter "*.whl" | Select-Object -First 1
          pip install $wheel.FullName
      - name: Run Tests
        run: python -m warp.tests --junit-report-xml rspec.xml -s autodetect
      - name: Test Summary
        uses: test-summary/action@v2.3
        with:
          paths: "rspec.xml"
          show: "fail"
        if: always()

  test-warp-ubuntu:
    runs-on: ubuntu-latest
    needs: build-warp-ubuntu
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Download Warp build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-ubuntu
          path: ./dist/
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy coverage[toml] usd-core
          pip install ./dist/*.whl
      - name: Run Tests
        run: python -m warp.tests --junit-report-xml rspec.xml -s autodetect
      - name: Test Summary
        uses: test-summary/action@v2.3
        with:
          paths: "rspec.xml"
          show: "fail"
        if: always()

  test-warp-macos:
    runs-on: macos-latest
    needs: build-warp-macos
    env:
      OS: macos-latest
      PYTHON_VERSION: 3.11
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Download Warp build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-macos
          path: ./dist/
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy coverage[toml] usd-core
          pip install ./dist/*.whl
      - name: Run Tests
        run: python -m warp.tests --junit-report-xml rspec.xml --coverage --coverage-xml coverage.xml -s autodetect
      - name: Test Summary
        uses: test-summary/action@v2.3
        with:
          paths: "rspec.xml"
          show: "fail"
        if: always()
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          env_vars: OS,PYTHON_VERSION
          files: ./coverage.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
