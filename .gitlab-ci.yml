# Copyright (c) 2023 NVIDIA CORPORATION.  All rights reserved.
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

# ==============================================================================
# CI/CD Pipeline Configuration
# ==============================================================================

include: /.gitlab/common.yml

workflow:
  rules:
    - if: $CI_PROJECT_PATH != "omniverse/warp" # Prevent fork pipelines
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG # Run for tagged releases
    - if: $CI_PIPELINE_SOURCE == "schedule"
      auto_cancel:
        on_new_commit: none
        on_job_failure: none
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_SHA
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH 
      auto_cancel:
        on_new_commit: none
        on_job_failure: none
    - if: $CI_COMMIT_BRANCH =~ /release-.*/
    - if: $CI_PIPELINE_SOURCE == "web" # Run if triggered from the UI

variables:
  PM_PACKAGES_ROOT: '$CI_PROJECT_DIR/packman-repo'
  PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'
  CUDA_BIN: '$CI_PROJECT_DIR/_build/target-deps/cuda/bin'
  CUDA: '$CI_PROJECT_DIR/_build/target-deps/cuda'
  PYTHON: '$CI_PROJECT_DIR/_build/target-deps/python/python'
  LINBUILD: '$CI_PROJECT_DIR/_build/host-deps/linbuild/linbuild.sh'
  WARP_CACHE_ROOT: '$CI_PROJECT_DIR/.cache/warp' # Used by the parallel test runner
  GIT_DEPTH: 1
  DEFAULT_PYTHON:
    value: "3.9.18+nv1"
    options:
      - "3.11.8+nv1"
      - "3.10.13+nv3"
      - "3.9.18+nv1"
      - "3.8.18+nv1"
      - "3.7.17+nv1"
    description: "The default Python version used in the main testing jobs."

stages:
  - build
  - test
  - child pipelines
  - package
  - deploy

# ==============================================================================
# Build Jobs (Release)
# ==============================================================================

linux-aarch64 build:
  stage: build
  image: urm.nvidia.com/ct-omniverse-docker-local/u18-aarch64-builder:3.2.0
  extends:
    - .save_warp_bin_artifact
  script:
    - ./tools/ci/building/build-linux-x86_64/build.sh --no-docker # We are already using the builder image
    - mkdir -p warp/bin/linux-aarch64
    - mv warp/bin/warp.so warp/bin/linux-aarch64
    - mv warp/bin/warp-clang.so warp/bin/linux-aarch64
  tags:
    - arch/arm

linux-x86_64 build:
  stage: build
  image: urm.nvidia.com/ct-omniverse-docker/centos7-gcc10-builder:3.2.0
  extends:
    - .save_warp_bin_artifact
    - .runner-small-build-linux-x86_64
  script:
    - ./tools/ci/building/build-linux-x86_64/build.sh --no-docker # We are already using the builder image
    - mkdir -p warp/bin/linux-x86_64
    - mv warp/bin/warp.so warp/bin/linux-x86_64
    - mv warp/bin/warp-clang.so warp/bin/linux-x86_64

windows-x86_64 build:
  stage: build
  extends:
    - .save_warp_bin_artifact
    - .runner-build-windows-x86_64
  before_script:
    - powershell -command "Get-Volume | Format-Table -AutoSize"
  script:
    - ./tools/ci/building/build-windows-x86_64/build.bat

mac-x86_64 build:
  stage: build
  extends:
    - .save_warp_bin_artifact
    - .runner-build-macos-universal
    - .macos_warp_tags
  script:
    - ./tools/ci/building/build-linux-x86_64/build.sh

# ==============================================================================
# Linting Jobs
#
# The jobs here are meant to assist with code quality analysis.
# They can run immediately without waiting for the build jobs to complete.
# ==============================================================================

ruff lint:
  stage: test
  image: python:3.11-slim
  needs: []
  extends:
    - .runner-utility-linux-x86_64
  before_script:
    - python -m pip install --upgrade pip
    - pip install ruff==0.3.7
  script:
    - ruff check --show-source --exit-zero # Just to get something in the log
    - ruff check --output-format gitlab > gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

ruff format:
  stage: test
  image: python:3.11-slim
  needs: []
  extends:
    - .runner-utility-linux-x86_64
  before_script:
    - python -m pip install --upgrade pip
    - pip install ruff==0.3.7
  script:
    - ruff format --diff

# ==============================================================================
# Main Unit Testing Jobs
#
# The jobs here will always be run when the pipeline is triggered. The jobs that
# compute code coverage run slower than jobs that do not. The minimal jobs were
# added to test the user experience without any optional Python packages.
# ==============================================================================

.test_common_main:
  stage: test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    paths:
      - rspec.xml
      - coverage.xml
    reports:
      junit: rspec.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

linux-aarch64 test:
  image: ubuntu:22.04
  needs: [linux-aarch64 build]
  extends:
    - .test_common_main
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - !reference [.snippets, install-python+warp-aarch64]
    - python -m pip install coverage[toml]
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml --coverage --coverage-xml coverage.xml -s autodetect
  tags:
    - arch/arm

linux-x86_64 test:
  needs: [linux-x86_64 build]
  extends:
    - .omni_nvks_gpu_2x
    - .test_common_main
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - df -h
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-x86_64/warp.so warp/bin/
    - mv warp/bin/linux-x86_64/warp-clang.so warp/bin/
    - tools/packman/packman install -l _build/target-deps/python python ${DEFAULT_PYTHON}-linux-x86_64
    - export PATH="$CUDA_BIN:$PATH"
    - $PYTHON -m venv _venv
    - source _venv/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade usd-core coverage[toml]
    - python -m pip install --upgrade torch --extra-index-url https://download.pytorch.org/whl/cu121
    - python -m pip install --upgrade "jax[cuda12_pip]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
    - python -m pip install -e .
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml --coverage --coverage-xml coverage.xml -s autodetect

windows-x86_64 test:
  stage: test
  needs: [windows-x86_64 build]
  extends:
    - .test_common_main
  before_script:
    - !reference [.snippets, define-powershell-GetTime]
    - Write-Output "$([char]27)[0Ksection_start:$(GetTime):install_dependencies[collapsed=true]$([char]13)$([char]27)[0KInstalling dependencies"
    - powershell -command "Get-Volume | Format-Table -AutoSize"
    - $python_name = $DEFAULT_PYTHON + "-windows-x86_64"
    - tools/packman/packman.cmd install -l _build/target-deps/python python $python_name
    - '& $env:CI_PROJECT_DIR\_build\target-deps\python\python.exe -m venv _venv'
    - .\_venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade usd-core coverage[toml]
    - python -m pip install --upgrade torch --extra-index-url https://download.pytorch.org/whl/cu121
    - python -m pip install -e .
    - Write-Output "$([char]27)[0Ksection_end:$(GetTime):install_dependencies$([char]13)$([char]27)[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml --coverage --coverage-xml coverage.xml -s autodetect
  tags:
    - os/windows
    - gpu/2x-A5000

mac-x86_64 test:
  stage: test
  needs: [mac-x86_64 build]
  extends:
    - .runner-test-macos-universal
    - .test_common_main
    - .macos_warp_tags
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - !reference [.snippets, install-python+warp-macos]
    - python -m pip install --upgrade usd-core coverage[toml]
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml --coverage --coverage-xml coverage.xml -s autodetect

# Test the Linux release build in an environment with minimal Python dependencies installed
linux-x86_64 test minimal:
  stage: test
  needs: [linux-x86_64 build]
  extends:
    - .omni_nvks_gpu_2x
    - .save_test_report_artifact
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - df -h
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-x86_64/warp.so warp/bin/
    - mv warp/bin/linux-x86_64/warp-clang.so warp/bin/
    - tools/packman/packman install -l _build/target-deps/python python ${DEFAULT_PYTHON}-linux-x86_64
    - $PYTHON -m venv _venv
    - source _venv/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install -e .
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml -s autodetect

# Test the Windows release build in an environment with minimal Python dependencies installed
windows-x86_64 test minimal:
  stage: test
  needs: [windows-x86_64 build]
  extends:
    #- .runner-test-windows-x86_64-gpu
    - .save_test_report_artifact
  before_script:
    - !reference [.snippets, define-powershell-GetTime]
    - Write-Output "$([char]27)[0Ksection_start:$(GetTime):install_dependencies[collapsed=true]$([char]13)$([char]27)[0KInstalling dependencies"
    - powershell -command "Get-Volume | Format-Table -AutoSize"
    - $python_name = $DEFAULT_PYTHON + "-windows-x86_64"
    - tools/packman/packman.cmd install -l _build/target-deps/python python $python_name
    - '& $env:CI_PROJECT_DIR\_build\target-deps\python\python.exe -m venv _venv'
    - .\_venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - python -m pip install -e .
    - Write-Output "$([char]27)[0Ksection_end:$(GetTime):install_dependencies$([char]13)$([char]27)[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml -s autodetect
  tags:
    - os/windows
    - gpu/2x-A5000

# The only purpose of this job is to make sure documentation can be built on Windows.
# The output does not get published anywhere, but the website can be viewed in the
# artifacts.
windows-x64_64 docs:
  stage: test
  needs: []
  extends:
    - .runner-utility-windows-x86_64
  artifacts:
    paths:
      - public
  before_script:
    - !reference [.snippets, define-powershell-GetTime]
    - Write-Output "$([char]27)[0Ksection_start:$(GetTime):install_dependencies[collapsed=true]$([char]13)$([char]27)[0KInstalling dependencies"
    - powershell -command "Get-Volume | Format-Table -AutoSize"
    - $python_name = $DEFAULT_PYTHON + "-windows-x86_64"
    - tools/packman/packman.cmd install -l _build/target-deps/python python $python_name
    - '& $env:CI_PROJECT_DIR\_build\target-deps\python\python.exe -m venv _venv'
    - .\_venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - python -m pip install -r docs/requirements.txt
    - Write-Output "$([char]27)[0Ksection_end:$(GetTime):install_dependencies$([char]13)$([char]27)[0K"
  script:
    - python build_docs.py
    - mv docs/_build/html/ ./public/
  after_script:
    - echo "You can view the website at https://omniverse.gitlab-master-pages.nvidia.com/-/warp/-/jobs/$CI_JOB_ID/artifacts/public/index.html"

# ==============================================================================
# Child pipelines
#
# The child pipelines defined here are only run in specific
# circumstances. Most developers don't need to worry about the
# jobs in this section.
# ==============================================================================

# Trigger additional (no code coverage) pipelines testing more Python versions
# Workaround from https://gitlab.com/gitlab-org/gitlab/-/issues/284086
trigger python 3.X test pipelines:
  stage: test
  image: busybox
  extends:
    - .runner-utility-windows-x86_64
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web" # Run if triggered from the UI
    - if: $CI_COMMIT_BRANCH =~ /release-.*/
    - when: manual # Can be triggered in all other scenarios
      allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Run this job to test additional Python versions."


python 3.7 test:
  stage: child pipelines
  needs: [trigger python 3.X test pipelines]
  trigger:
    include: /.gitlab/additional-tests.yml
  extends:
    - .trigger_common
  variables:
    DEFAULT_PYTHON: "3.7.17+nv1"

python 3.8 test:
  stage: child pipelines
  needs: [trigger python 3.X test pipelines]
  trigger:
    include: /.gitlab/additional-tests.yml
  extends:
    - .trigger_common
  variables:
    DEFAULT_PYTHON: "3.8.18+nv1"

# Trigger debug build and test (no code coverage) pipelines
# Workaround from https://gitlab.com/gitlab-org/gitlab/-/issues/284086
trigger debug build and test pipeline:
  stage: test
  image: busybox
  extends:
    - .runner-utility-windows-x86_64
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web" # Run if triggered from the UI
    - if: $CI_COMMIT_BRANCH =~ /release-.*/
    - when: manual # Can be triggered in all other scenarios
      allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Run this job to test Warp compiled in debug mode."

# Uses the same Python version as the main pipeline.
debug build and test:
  stage: child pipelines
  needs: [trigger debug build and test pipeline]
  trigger:
    include: /.gitlab/debug-build-and-test.yml
  extends:
    - .trigger_common

# ==============================================================================
# Packaging Jobs
#
# Kit and PyPI jobs produce deployment artifacts and are not run in MRs unless
# manually started.
# ==============================================================================

# Creates wheel files for PyPI
create pypi wheels:
  stage: package
  needs:
    - linux-aarch64 build
    - linux-x86_64 build
    - windows-x86_64 build
    - mac-x86_64 build
  extends:
    - .runner-utility-linux-x86_64
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web" # Run if triggered from the UI
    - if: $CI_COMMIT_BRANCH =~ /release-.*/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - pyproject.toml
        - setup.py
    - when: manual # If not auto-triggered, allow any pipeline to run this job manually
      allow_failure: true
  before_script:
    # Move binaries into platform-specific folders. Already done in the build jobs for Linux.
    - mkdir -p warp/bin/windows-x86_64
    - mv warp/bin/warp.dll warp/bin/windows-x86_64/
    - mv warp/bin/warp-clang.dll warp/bin/windows-x86_64/
    - mkdir -p warp/bin/macos-universal
    - mv warp/bin/libwarp.dylib warp/bin/macos-universal/
    - mv warp/bin/libwarp-clang.dylib warp/bin/macos-universal/
    - python3 -m pip install --upgrade pip
    - python3 -m pip install build
  script:
    - python3 -m build --wheel -C--build-option=-Pwindows-x86_64
    - python3 -m build --wheel -C--build-option=-Plinux-x86_64
    - python3 -m build --wheel -C--build-option=-Plinux-aarch64
    - python3 -m build --wheel -C--build-option=-Pmacos-universal
    - find . -type f -exec chmod 664 {} +
    - find . -type d -exec chmod 775 {} +
  artifacts:
    name: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    expose_as: "Python Wheels"
    paths:
      - "dist/"
    when: always

# Creates an artifact suitable for publishing the Kit extensions
create kit artifacts:
  stage: package
  needs:
    - linux-x86_64 build
    - windows-x86_64 build
  extends:
    - .runner-utility-linux-x86_64
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web" # Run if triggered from the UI
    - if: $CI_COMMIT_BRANCH =~ /release-.*/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' # Can be manually triggered for MRs
      when: manual
      allow_failure: true
  before_script:
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-x86_64/warp.so warp/bin/
    - mv warp/bin/linux-x86_64/warp-clang.so warp/bin/
    - rm -r warp/bin/linux-x86_64/
    - rm -rf warp/native/cutlass
    - apt-get update && apt-get install zip --no-install-recommends -y
  script:
    - python3 tools/ci/publishing/build_nodes_info.py
    - mv warp exts/omni.warp.core/
    - find . -type f -exec chmod 664 {} +
    - find . -type d -exec chmod 775 {} +
    - find exts/ -name .gitignore -delete
    - zip -r kit-extensions.zip exts/
  artifacts:
    name: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    expose_as: "Kit Extensions"
    paths:
      - kit-extensions.zip

# ==============================================================================
# Deployment Jobs
#
# This section currently contains jobs that publish files to the internal
# GitLab service.
# ==============================================================================

# Uploads the wheels to the internal GitLab package registry in the Warp project
# See files at https://gitlab-master.nvidia.com/omniverse/warp/-/packages
# Generated files will be in a branch/tag-specific folder
publish wheels to gitlab package registry:
  stage: deploy
  needs: ["create pypi wheels", "create kit artifacts"]
  extends:
    - .runner-utility-linux-x86_64
  rules:
    - if: $CI_COMMIT_BRANCH =~ /release-.*/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' # Can be manually triggered for MRs
      when: manual
      allow_failure: true
  before_script:
    - apt-get update && apt-get install curl --no-install-recommends -y
  script:
    - |
      for file in $(find . -name '*.whl'); do
          filename=$(basename -- "$file")
          curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "$file" "https://gitlab-master.nvidia.com/api/v4/projects/${CI_PROJECT_ID}/packages/generic/warp/${CI_COMMIT_REF_SLUG}/${filename}"
      done
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file kit-extensions.zip "https://gitlab-master.nvidia.com/api/v4/projects/${CI_PROJECT_ID}/packages/generic/warp/${CI_COMMIT_REF_SLUG}/kit-extensions.zip"'

.build-docs-common:
  stage: deploy
  image: python:3.11-slim
  needs: []
  extends:
    - .runner-utility-linux-x86_64
  artifacts:
    paths:
      - public
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KSet up docs environment"
    - apt-get update && apt-get install make --no-install-recommends -y
    - python -m pip install --upgrade pip
    - python -m pip install -r docs/requirements.txt
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - python build_docs.py
    - mv docs/_build/html/ ./public/

# Merge requests: Build documentation and save as an artifact
# A link to the generated documentation is added to the merge request.
merge request docs:
  extends:
    - .build-docs-common
  artifacts:
    paths:
      - warp/stubs.py
      - docs/modules/functions.rst
      - public
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    url: https://omniverse.gitlab-master-pages.nvidia.com/-/warp/-/jobs/$CI_JOB_ID/artifacts/public/index.html
  after_script:
    - echo "You can view the website at https://omniverse.gitlab-master-pages.nvidia.com/-/warp/-/jobs/$CI_JOB_ID/artifacts/public/index.html"

# Merge requests: Ensure that exports.h, stubs.py, functions.rst have been
# manually added to the MR if they are changed
check generated files:
  needs:
    - job: linux-x86_64 build
    - job: merge request docs
      optional: true
  stage: deploy
  artifacts:
    when: on_failure
    expose_as: 'Generated source files'
    paths:
      - warp/native/exports.h
      - warp/stubs.py
      - docs/modules/functions.rst
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  extends:
    - .runner-utility-linux-x86_64
  script:
    - >
      git diff --exit-code warp/stubs.py docs/modules/functions.rst ||
      (echo "Please run build_docs.py (or download from https://gitlab-master.nvidia.com/omniverse/warp/-/jobs/$CI_JOB_ID/artifacts/browse) and add modified files to your merge request." && false)
    - >
      git diff --exit-code warp/native/exports.h ||
      (echo "Please run build_lib.py  (or download from https://gitlab-master.nvidia.com/omniverse/warp/-/jobs/$CI_JOB_ID/artifacts/browse) and add warp/native/exports.h to your merge request." && false)

# Build documentation and publish on gitlab-master
# This only runs in the default branch pipeline. The "pages" name is special for GitLab.
# Documentation is available at https://omniverse.gitlab-master-pages.nvidia.com/warp/
pages:
  extends:
    - .build-docs-common
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  environment:
    name: staging
    url: https://omniverse.gitlab-master-pages.nvidia.com/warp/
